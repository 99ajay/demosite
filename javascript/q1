// function reverse(str){
//   return str.split("").reverse().join("");
// }

// console.log(reverse("asdfggh"));

// function pailndromic(str){
//   // let s="";
//   // for(let i=0;i<str.length;i++)
//   // {
//   //   s=str[i]+s;
//   // }
//   // return (str===s);

//   return (str.split("").reverse().join("")===str);
// }

// console.log(pailndromic("dala"));


// function reverseinteger(num){

//   return parseInt(num.toString().split("").reverse().join(""))*Math.sign(num);
// }

// console.log(reverseinteger(-578))



// function fizzbuzz(num){
//   let finalarray=[];

//   for(let i=1;i<=num;i++){
//     if(i%2==0){
//       finalarray.push("Fizz");
//     }
//     else if(i%3==0){
//       finalarray.push("Buzz");
//     }
//     else if(i%2==0 && i%3==0){
//       finalarray.push("Fizz Buzz");
//     }
//     else
//     {
//       finalarray.push(i);
//     }
//   }
//   return finalarray;
// }

// console.log(fizzbuzz(12));





// function maxcharacter(str){
//   const storeval={};
//   for(let i=0;i<str.length;i++){
//     if(!storeval.hasOwnProperty([str[i]]))
//     {
//     storeval[str[i]]=1;
//     }
//     else
//     {
//     storeval[str[i]]=storeval[str[i]]+1;
//     }
//   }
// let maxcharacter="";
// let maxcount=0;
//  for(let x in storeval){
// if(storeval[x]>maxcount){
//   maxcount=storeval[x];
//   maxcharacter=x;
// }
//  }

// //console.log(storeval);
//   return maxcharacter;
// }

// console.log(maxcharacter("asdfghjdfggh"));



//6..validate anagram of string 

// function ma(str){
//   const storeval={};
//   str=str.replace(/\W/g,"");
//  // console.log(str)
//   for(let i=0;i<str.length;i++){
//     if(!storeval.hasOwnProperty([str[i]]))
//     {
//     storeval[str[i]]=1;
//     }
//     else
//     {
//     storeval[str[i]]=storeval[str[i]]+1;
//     }
//   }
//   return storeval;
// }
///console.log(ma("ghs%&"))

// function anagram(str1,str2){
//   const charcount1=ma(str1);
//   const charcount2=ma(str2);

//  // console.log(charcount1,ch)
//   if(Object.keys(charcount1).length!=Object.keys(charcount2).length){
//     return false;
//   }

//   for(let char in charcount1){
//     if(charcount1[char]!=charcount2[char])
//     {
//       return false;
//     }
//   }
//   return true;



// }

// console.log(anagram("hellox","hellox"));


//second method
// function anagram(str1,str2){
//   str1=str1.split("").sort().join("");
//   str2=str2.split("").sort().join("");
//   return str1===str2;
// }
// console.log(anagram("hzellcox","zhelclox"));






//7.Vowels 

// const countvowel=str=>{
//    const matches=str.match(/[aeiou]/g);
//    return matches ? matches.length : 0;

// }

// console.log(countvowel("helloooo"))




//8..Array chunking 

// function chunking(arr,size){
//   let finalarray=[];
//   for(let i=0;i<arr.length;i+=size)
// {
//   finalarray.push(arr.slice(i,i+size));

// }
// return finalarray;

// }

// console.log(chunking([1,2,3,4,5,6,3],2))


//9.array reverse

// function reversearray(arr){
//   return arr.reverse();
// }

// console.log(reversearray([1,2,3,4,5,6]))


//10....Reverse word

// function reverseword(str){
// // let reversearray=[];
//  const word=str.split(" ").map(oneword=>{return oneword.split("").reverse().join("")}).join(" ");

//  return word;

// }
// console.log(reverseword("my name is ajay verma"));


//22.  Spiral matrix 

// function spiral(num){
//   let top=0;
//   let bottom=num-1;
//   let left=0;
//   let right=num-1;
//   let counter=1;
//   const matrix=[];
//   for(let i=0;i<num;i++){
//     matrix.push([]);
//   }


//   while(top<=bottom && left<=right){
//     for(let i=left;i<=right;i++){
//       matrix[top][i]=counter;
//       counter++;
//     }
//     top++;
//     for(let i=top;i<=bottom;i++){
//       matrix[i][right]=counter;
//       counter++;

//     }
//     right--;

//     if(top<=bottom){
//       for(let i=right;i>=left;i--){
//         matrix[bottom][i]=counter;
//         counter++;
//       }
//     }
//     bottom--;
//     if(left<=right){
//       for(let i=bottom;i>=top;i--){
//         matrix[i][left]=counter;
//         counter++;
//       }
//       left++;
//     }




//   }
//   return matrix;
// }

// console.log(spiral(4));












//maxprofit

function maxProfit(prices){
    let min = prices[0],min_price;
    let max = -100,max_price;
    for(let i=0;i<prices.length;i++){
      if(prices[i]>=min){
        if(prices[i] - min>max){
          max = prices[i] - min;
          max_price = prices[i];
          min_price = min;
        }
      }
      min = Math.min(min,prices[i]);
    }
    console.log(min_price,max_price);
  }

  (maxProfit([2,1,2,11]));